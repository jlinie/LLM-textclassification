Here is a text classification project that im still working on for best runs. The aim is to evaluate two models 
(Logistic Regression which is my fav ml model vs llama3.2) 
in terms of accuracy, robustness, speed, cost, error analysis. 
##ROADMAP 
So, i started with splitting the data into test,train,val sets. Then set up a TF-IDF vectorizer, which gives me numeric vectors from raw text. 
I load the train+val TSVs, fit the TF-IDF on the training texts, then train a multinomial logistic regression.
I check validation accuracy right away so I know it’s learning something sensible, then dump both the vectorizer and model. After that, I load that saved pickle,
transform the test split, and print out overall accuracy plus a full classification report (precision/recall/F1) so we can see which categories 
it nails and which it misses, also had predict.py, so you can call it like python -m src.predict --model models/logreg_baseline.pkl --text 
"This sentence goes where?" and instantly get a predicted label.
Then, to compare against a powerful LLM via Ollama, the llm_evaluate.py script first reuses our TF-IDF vectorizer to score each example’s highest 
feature weight and, for any “atypical” texts (i.e. those whose top-weight score falls below a preset threshold), 
sends the text plus its Entities in a few-shot prompt listing all categories and two illustrative examples. 
If the example looks typical, it simply falls back to predicting the most common class. All of the Ollama API calls run in parallel, 
and the script tracks both total and average latency. When it’s done, it prints out overall accuracy, a full classification report, 
and dumps the true labels, predictions, and timing data to a JSON file. Finally, our Makefile ties everything together—so you can 
reproduce the entire pipeline with make split, make train, make eval, make llm, and so on—giving you a seamless end-to-end journey from raw data through a 
logistic-regression baseline to an Ollama-powered LLM classifier, complete with metrics and runtime statistics.
##Challenges:
Challenges i encountered throughout this project:
  -Training on a very large, and imbalanced, dataset (classes aren’t equally represented)
  -Slow LLM inference times 
  -Tuning and maximizing the accuracy of the logistic regression baseline
  -Limited CPU resources on my local machine for heavy training

## Data splitting

From your project root, run:

```bash
python3 -m data_manipulation.split \
  --input "data/data:).tsv" \
  --output-dir data/processed \
  --val-frac 0.1 \
  --test-frac 0.1


## setup 
```bash
    pip install -r requirements.txt
## Baseline ile TF-IDF + LogisticRegression

### training
```bash
python -m src.train \
  --train data/processed/train.tsv \
  --val   data/processed/validation.tsv \
  --out   models/logreg_baseline.pkl
 

 ###eval 
 ```bash 
    python -m src.evaluate \
  --model models/logreg_baseline.pkl \
  --test  data/processed/test.tsv
 
##sampleguess 
 ```bash 
python -m src.predict \
  --model models/logreg_baseline.pkl \
  --text "Bu cümle hangi kategoride?"
## LLM-based classification with Ollama

### Pull the model
```bash
ollama pull llama3.2
```bash
python -m src.llm_evaluate \tou
  --test      data/processed/test.tsv \
  --model-name llama3.2 \
  --out-preds results/llm_preds.json 


  ### Installing Ollama

This project uses [Ollama](https://ollama.com) for LLM-based evaluation. To install:

```bash
brew install ollama    # macOS
# or see https://docs.ollama.com/#installation for other platforms 
ollama pull llama3.2    # pulls the llama2 model locally
ollama serve          # starts the Ollama daemon on localhost 
python3 -m src.llm_evaluate --test data/processed/test.tsv --model-name llama3.2

örnek:% ollama run llama3.2
>>> Aşağıda 1 cümle var. Lütfen hiçbir düşünme süreci veya ek açıklama yazma; ya
... lnızca tek bir kategori adı yaz. Kategoriler: music, people, transportation.
...  Cümle: Bu albümdeki Gone Ridin ve Livin " for Your Lover David Lynch'nin Ma
... vi Kadife adlı filmin özelliklerini taşır .
David Lynch
 

 Sen bir metin sınıflandırma asistanısın. Aşağıda iki örnek ve bir sınıflandı
... rma işi var. Tüm **Entities** bilgilerini kullanarak, her cümleyi yalnızca a
... şağıdaki kategorilerden birine atayın. Cevap olarak **sadece** kategori adın
... ı (tek kelime) yazın; başka metin veya noktalama eklemeyin.
... 
... Kategoriler: music, people, transportation
... 
... Örnek 1:
... Cümle: Walt Disney Music Company tarafından Musicnotes.com’da yayımlanan not
... a kağıdına göre şarkı, üç dörtlük ölçü işaretiyle ve dakikada 192 tempoluk m
... elodiyle yazılmıştır.  
... Entities: B-artist_name=Walt Disney Music Company, B-composition_form=üç dör
... tlük ölçü işareti  
... Kategori: music
... 
... Örnek 2:
... Cümle: Bedir Muharebesi öncesi Müslümanların yağmalamayı planladığı kervanın
...  lideriydi.  
... Entities: B-military_conflict_name=Bedir Muharebesi  
... Kategori: military
... 
... Şimdi sınıflandır:
... Cümle: Bu albümdeki Gone Ridin ve Livin for Your Lover David Lynch\'nin Mavi
...  Kadife adlı filmin özelliklerini taşır.  
... Entities: B-artist_track=Gone Ridin, B-artist_track=Livin for Your Lover, B-
... film_name=Mavi Kadife, B-person_name=David Lynch  
... Yanıt:' \
...   --max_tokens 1 \
...   --temperature 0.0 \
...   --stop '\n'
music

 başarılı 
